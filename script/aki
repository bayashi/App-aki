#!perl
use strict;
use warnings;
use App::aki;

my $aki = App::aki->run(@ARGV);

__END__

=head1 NAME

aki - The command-line data processor for web content

=head1 SYNOPSIS

    $ aki [options] URL

=head2 OPTIONS

    -d   --decoder       specify deoder(default: auto detect)
         --agent         user agent
         --timeout       connection timeout
    -m,  --method        HTTP method(default: GET)
         --cookie        cookie file path for request
    -p,  --pointer       JSON pointer string(See: JSON::Pointer)
    -ie, --in-enc        input encoding(default: utf8)
    -oe, --out-enc       output encoding(default: utf8)
         --color         colorize the result
         --print_escapes show non-printable chars as "\n", "\t", etc.
         --stderr        print to STDERR(default: STDOUT)
         --indent        how many spaces in each indent(default: 4)
         --raw           show raw content
         --verbose       show verbose information

    -h,  --help          show this help
    -v,  --version       show the version

=head2 EXAMPLE

    $ aki http://example.com/json --pointer '/foo/bar/0'
    ---
        baz     123
        qux     "foobar"
    ---


=head1 CONFIGURATION

C<aki> command will look for a configuration file before reading its command line parameters.

The default configuration file is C<.akirc> but you can specify it by C<--rc> option. And the location of a configuration file is C<$HOME> but if the C<AKIRC_DIR> environment variable is set, C<aki> will look for config in that directory or current.

The configuration file is just a list of names and values, separated by colons. Values that take lists are just space separated. A sample configuration file might read:

    color: 1
    agent: MyAgent/1.0


=head1 AUTHOR

Dai Okabayashi E<lt>bayashi@cpan.orgE<gt>


=head1 SEE ALSO

L<JSON::Pointer>


=head1 LICENSE

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See L<perlartistic>.


=cut
